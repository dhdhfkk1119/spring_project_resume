{{> layout/header}}

<div class="container my-5" style="max-with:1200px;">
    <div class="card shadow-sm">
        <div class="card-header bg-light py-3">
            <h2 class="h4 mb-0">{{member.username}}님의 포부를 담은 이력서</h2>
        </div>
        <div class="card-body">
            <form id="save-form" action="/resume/save" method="post">
                <!-- 이력서 제목 -->
                <div class="mb-3">
                    <label for="resumeTitle" class="form-label fw-bold">눈길을 잡아끄는 키워드</label>
                    <input type="text" class="form-control" id="resumeTitle" name="resumeTitle"
                           value="눈길을 잡아끄는 키워드를 써보세요" maxlength="50" required>
                    {{#errors.resumeTitle}}
                        <div class="text-danger small">{{.}}</div>{{/errors.resumeTitle}}
                </div>
                <!-- 이력서 본문 -->
                <div class="mb-3">
                    <label for="resumeContent" class="form-label fw-bold">마음을 움직이는 소개글</label>
                    <textarea class="form-control" id="resumeContent" name="resumeContent" rows="15"
                              maxlength="5000" required>마음을 움직이는 소개글을 작성해보세요... 예)제가 LA에 있을때는 말이죠 정말 제가 꿈에 무대인 메이저리그로 진출해서 가는 식당마다 싸인해달라 기자들은 항상 붙어다니며 취재하고...</textarea>
                    {{#errors.resumeContent}}
                        <div class="text-danger small">{{.}}</div>{{/errors.resumeContent}}
                </div>
                <!-- 대표 이력서 설정 체크박스 -->
                <div class="form-check mb-3">
                    <input class="form-check-input" type="checkbox" name="isRep" id="isRep" value="true"
                           {{#resume.isRep}}checked{{/resume.isRep}}>
                    <label class="form-check-label" for="isRep">
                        이 이력서를 내 대표 이력서로 설정할게요
                    </label>
                </div>

                <hr>

                <h4>경력 정보</h4>
                <div id="career-container">
                    <!-- 경력 입력 필드 -->
                </div>
                <button type="button" id="add-career-btn" class="btn btn-outline-secondary">경력 추가</button>

                <hr>
                <div class="d-flex justify-content-end">
                    <a href="/resumes" class="btn btn-outline-secondary me-2">취소</a>
                    <button type="submit" id="submit-btn" class="btn btn-outline-primary">저장하기</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script>
    // 경력 정보 동적 추가/삭제 스크립트
    document.addEventListener('DOMContentLoaded', function () {
        const careerContainer = document.getElementById('career-container');
        const addCareerBtn = document.getElementById('add-career-btn');
        let careerIndex = 0; // 각 경력 필드를 구분하기 위한 인덱스

        // 날짜 입력을 위한 flatpickr 초기화 함수
        function initializeFlatpickr(element) {
            flatpickr(element, {
                dateFormat: "Y-m-d", // 날짜 형식 지정 (YYYY-MM-DD)
                locale: "ko" // 한글 지원 (CDN 추가 필요 시)
            });
        }

        addCareerBtn.addEventListener('click', function () {
            const careerDiv = document.createElement('div');
            careerDiv.classList.add('card', 'my-3', 'p-3', 'bg-light');
            // name 속성의 careers[index].fieldName 형태는 Spring Boot가 List<DTO>로 데이터를 바인딩할 수 있게 해줍니다.
            careerDiv.innerHTML = `
                <div class="row">
                    <div class="col-md-11">
                        <div class="mb-2">
                            <label class="form-label">회사명</label>
                            <input type="text" name="careers[${careerIndex}].corpName" class="form-control"
                             value="좋좋소"
                             maxlength="50" required>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">직책</label>
                            <input type="text" name="careers[${careerIndex}].position" class="form-control"
                             value="과장대리"
                             maxlength="50">
                        </div>
                        <div class="mb-2">
                            <label class="form-label">담당 업무</label>
                            <input type="text" name="careers[${careerIndex}].careerContent" class="form-control"
                             value="복사와 커피타기"
                             maxlength="500" required>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">입사일</label>
                                <input type="date" name="careers[${careerIndex}].startAt" class="form-control"
                                value="2022-02-22">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">퇴사일</label>
                                <input type="date" name="careers[${careerIndex}].endAt" class="form-control"
                                value="2022-02-22">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-1 d-flex align-items-center justify-content-center">
                        <button type="submit" class="btn btn-link p-0" title="삭제하기" style="color: Tomato;">
                            <i class="fa-solid fa-trash fs-5"></i>
                        </button>
                    </div>
                </div>
            `;
            careerContainer.appendChild(careerDiv);

            // 날짜 input에 flatpickr 적용
            const newDateInputs = careerDiv.querySelectorAll('input[type="date"]');
            newDateInputs.forEach(initializeFlatpickr);

            careerIndex++;
        });



        // '삭제' 버튼에 대한 이벤트 리스너 (이벤트 위임 사용)
        careerContainer.addEventListener('click', function (e) {
            if (e.target && e.target.classList.contains('remove-career-btn')) {
                // 가장 가까운 .card 요소를 찾아 삭제합니다.
                e.target.closest('.card').remove();
            }
        });
    });

    //빈 경력 폼을 제거, 유효성 검사, 불필요한 데이터 전송 방지
    const saveForm = document.getElementById('save-form');
    const submitBtn = document.getElementById('submit-btn');
    submitBtn.addEventListener('click', function() {
        const newCareerItems = document.querySelectorAll('.card.my-3'); // 새로 추가된 경력 아이템
        newCareerItems.forEach(item => {
            const corpNameInput = item.querySelector('input[name*="corpName"]');
            // 회사명이 비어있으면 해당 경력 폼 자체를 삭제
            if (corpNameInput && corpNameInput.value.trim() === '') {
                item.remove();
            }
        });

        if (saveForm.checkValidity()) {
            saveForm.submit();
        } else {
            saveForm.reportValidity(); // 유효하지 않은 필드에 브라우저 기본 경고창 표시
        }
    });
</script>

{{> layout/footer}}