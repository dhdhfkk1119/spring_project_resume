{{> layout/header}}

<div class="card shadow-sm">
    <div class="card-header">
        <h2 class="h4 mb-0">이력서 작성</h2>
    </div>
    <div class="card-body">
        <form action="/resume/save" method="post">
            <!-- 이력서 제목 -->
            <div class="mb-3">
                <label for="resumeTitle" class="form-label fw-bold">이력서 제목</label>
                <input type="text" class="form-control" id="resumeTitle" name="resumeTitle" placeholder="예: 성실한 개발자 홍길동입니다.">
                {{#errors.resumeTitle}}<div id="resumeTitle-error" class="error-message"></div>{{/errors.resumeTitle}}
            </div>
            <!-- 이력서 본문 -->
            <div class="mb-3">
                <label for="resumeContent" class="form-label">이력서 내용</label>
                <textarea class="form-control" id="resumeContent" name="resumeContent" rows="15" placeholder="자유롭게 이력서 내용을 작성해주세요. (예: 자기소개, 기술 스택, 프로젝트 경험 등)"></textarea>
                <div id="resumeContent-error" class="error-message"></div>
            </div>
            <hr>

            <h4>경력 정보</h4>
            <div id="career-container">
                <!-- 경력 입력 필드 -->
            </div>
            <button type="button" id="add-career-btn" class="btn btn-secondary mt-2">경력 추가</button>

            <hr>
            <div class="d-flex justify-content-end">
                <a href="/resumes" class="btn btn-secondary me-2">취소</a>
                <button type="submit" class="btn btn-primary">저장하기</button>
            </div>
        </form>
    </div>
</div>

<script>
    // 경력 정보 동적 추가/삭제 스크립트
    document.addEventListener('DOMContentLoaded', function () {
        const careerContainer = document.getElementById('career-container');
        const addCareerBtn = document.getElementById('add-career-btn');
        let careerIndex = 0; // 각 경력 필드를 구분하기 위한 인덱스

        addCareerBtn.addEventListener('click', function () {
            const careerDiv = document.createElement('div');
            careerDiv.classList.add('card', 'my-3', 'p-3', 'bg-light');
            // name 속성의 careers[index].fieldName 형태는 Spring Boot가 List<DTO>로 데이터를 바인딩할 수 있게 해줍니다.
            careerDiv.innerHTML = `
                <div class="row">
                    <div class="col-md-11">
                        <div class="mb-2">
                            <label class="form-label">회사명</label>
                            <input type="text" name="careers[${careerIndex}].corpName" class="form-control">
                            <div id="corpName-error" class="error-message"></div>
                        </div>
                        <div class="mb-2">
                            <label class="form-label">직책</label>
                            <input type="text" name="careers[${careerIndex}].position" class="form-control">
                        </div>
                        <div class="mb-2">
                            <label class="form-label">담당 업무</label>
                            <textarea name="careers[${careerIndex}].careerContent" class="form-control" rows="3"></textarea>
                            <div id="careerContent-error" class="error-message"></div>
                        </div>
                        <div class="row">
                            <div class="col-md-6">
                                <label class="form-label">입사일</label>
                                <input type="date" name="careers[${careerIndex}].startAt" class="form-control">
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">퇴사일</label>
                                <input type="date" name="careers[${careerIndex}].endAt" class="form-control">
                            </div>
                        </div>
                    </div>
                    <div class="col-md-1 d-flex align-items-center justify-content-center">
                        <button type="button" class="btn btn-sm btn-outline-danger remove-career-btn">삭제</button>
                    </div>
                </div>
            `;
            careerContainer.appendChild(careerDiv);
            careerIndex++;
        });

        // '삭제' 버튼에 대한 이벤트 리스너 (이벤트 위임 사용)
        careerContainer.addEventListener('click', function (e) {
            if (e.target && e.target.classList.contains('remove-career-btn')) {
                // 가장 가까운 .card 요소를 찾아 삭제합니다.
                e.target.closest('.card').remove();
            }
        });
    });
</script>

{{> layout/footer}}